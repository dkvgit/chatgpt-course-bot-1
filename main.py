from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os

BOT_TOKEN = os.getenv("7645649555:AAF7Kcgbyl2Sp-S2OQEAkMhP1PWn4l1eHo4")
CHANNEL_LINK = "https://t.me/+abc123def456"  # –¢–≤–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª

app = Flask(__name__)
bot_app = ApplicationBuilder().token(BOT_TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –û –∫—É—Ä—Å–µ", callback_data="about")],
        [InlineKeyboardButton("üéì –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
        [InlineKeyboardButton("üì¶ –ü—Ä–∏–º–µ—Ä—ã", callback_data="demo")]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫—É—Ä—Å ChatGPT –¥–ª—è –≤—Å–µ—Ö üëá", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about":
        await query.edit_message_text("üí° –≠—Ç–æ—Ç –∫—É—Ä—Å –Ω–∞—É—á–∏—Ç —Ç–µ–±—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò: –ø—Ä–æ—Å—Ç–æ, —Å —é–º–æ—Ä–æ–º –∏ –ø–æ –¥–µ–ª—É.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 990‚ÇΩ. –û–¥–∏–Ω —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞.")
    elif query.data == "buy":
        keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]]
        await query.edit_message_text("–ü–µ—Ä–µ–≤–µ–¥–∏ 990‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É 1234 5678 9012 3456\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "paid":
        await query.edit_message_text(f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:\n{CHANNEL_LINK}")
    elif query.data == "demo":
        await query.edit_message_text("–û—Ç–∫—Ä—ã—Ç—ã–π —É—Ä–æ–∫: https://t.me/neuronica_news/1\n–ë–ª–æ–∫ 0 –∏ –ë–ª–æ–∫ 1 ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã!")

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CallbackQueryHandler(button_handler))

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    bot_app.update_queue.put_nowait(Update.de_json(request.get_json(force=True), bot_app.bot))
    return "ok"

@app.route("/")
def root():
    return "Bot is alive"

if __name__ == "__main__":
    bot_app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=f"https://<your-app-url>.render.com/{BOT_TOKEN}"
    )
